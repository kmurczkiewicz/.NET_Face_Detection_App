using Newtonsoft.Json.Linq;
using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Net;
using System.Threading;
using System.Windows.Forms;

namespace _18896_FinalProject
{
    class NetworkManager
    {
        /*Class that connects to two websites:
        random human: https://thispersondoesnotexist.com/
        random cat: https://thiscatdoesnotexist.com/
        and takes random images generated by AI
        nailed it!
        */

        private readonly string urlGenerateHuman = "https://thispersondoesnotexist.com/image";
        private readonly string urlGenerateCat = "https://api.thecatapi.com/v1/images/search"; //cat api
        private readonly string catPath = @"tmp_files\tmpCatImage.png";
        private readonly string humanPath = @"tmp_files\tmpFaceImage.png";

        private Label downloadLabel;
        private ProgressBar downloadBar;
        private PictureBox catPictureBox;


        public void GetGeneratedHuman(Label downloadLabel, ProgressBar downloadBar, PictureBox catPictureBox)
        {
            this.downloadLabel = downloadLabel;
            this.downloadBar = downloadBar;
            this.catPictureBox = catPictureBox;

            using (WebClient client = new WebClient())
            {
                client.DownloadProgressChanged += new DownloadProgressChangedEventHandler(client_DownloadProgressChanged);
                client.DownloadFileCompleted += Client_DownloadFileCompletedHuman;
                client.DownloadFileAsync(new Uri(urlGenerateHuman), humanPath);
            }

        }

        public void GetGeneratedCat(Label downloadLabel, ProgressBar downloadBar, PictureBox catPictureBox)
        {
            try
            {
                this.downloadLabel = downloadLabel;
                this.downloadBar = downloadBar;
                this.catPictureBox = catPictureBox;

                var catJson = " ";

                using (WebClient wc = new WebClient())
                {
                    catJson = wc.DownloadString(urlGenerateCat);
                }

                JObject obj = (JObject)JArray.Parse(catJson)[0];
                string catUrl = (string)obj["url"];


                using (WebClient client = new WebClient())
                {
                    client.DownloadProgressChanged += new DownloadProgressChangedEventHandler(client_DownloadProgressChanged);
                    client.DownloadFileCompleted += Client_DownloadFileCompletedCat;
                    client.DownloadFileAsync(new Uri(catUrl), catPath);
                }
            }
            catch(Exception catExp)
            {

            }
        }

        private void Client_DownloadFileCompletedCat(object sender, System.ComponentModel.AsyncCompletedEventArgs e)
        {
            try
            {
                Image img;
                using (var bmpTemp = new Bitmap(catPath))
                {
                    catPictureBox.Image = new Bitmap(bmpTemp);
                }
            }
            catch (Exception l)
            {
                //somebody spamming the button
            }
        }

        private void Client_DownloadFileCompletedHuman(object sender, System.ComponentModel.AsyncCompletedEventArgs e)
        {
            try
            {
                Image img;
                using (var bmpTemp = new Bitmap(humanPath))
                {
                    catPictureBox.Image = new Bitmap(bmpTemp);
                }
            }
            catch(Exception l)
            {
                //somebody spamming the button
            }
        }

        void client_DownloadProgressChanged(object sender, DownloadProgressChangedEventArgs e)
        {
            double bytesIn = double.Parse(e.BytesReceived.ToString());
            double totalBytes = double.Parse(e.TotalBytesToReceive.ToString());
            double percentage = Math.Round( bytesIn / totalBytes * 100, 2);
            downloadLabel.Text = percentage+"%";
            downloadBar.Value = int.Parse(Math.Truncate(percentage).ToString());
        }

    }


}
